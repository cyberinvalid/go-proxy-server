package main

import (
	"bytes"
	"compress/gzip"
	"encoding/hex"
	"encoding/json"
	"io"
	"log"
	"net/http"
	"net/url"
	"os"
	"path"
	"regexp"
	"strconv"
	"strings"
	"sync"
	"unicode/utf8"
)

// ResponseOverride –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–º–µ–Ω—ã –æ—Ç–≤–µ—Ç–∞
type ResponseOverride struct {
	Name           string            `json:"name"`             // –ò–º—è –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤
	Method         string            `json:"method"`           // HTTP –º–µ—Ç–æ–¥ (* –¥–ª—è –ª—é–±–æ–≥–æ)
	URLPattern     string            `json:"url_pattern"`      // –ü–∞—Ç—Ç–µ—Ä–Ω URL (–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç regex)
	IsRegex        bool              `json:"is_regex"`         // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å regex –¥–ª—è –ø–∞—Ç—Ç–µ—Ä–Ω–∞
	StatusCode     int               `json:"status_code"`      // HTTP —Å—Ç–∞—Ç—É—Å –∫–æ–¥
	Headers        map[string]string `json:"headers"`          // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
	BodyFile       string            `json:"body_file"`        // –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å —Ç–µ–ª–æ–º –æ—Ç–≤–µ—Ç–∞
	BodyText       string            `json:"body_text"`        // –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ —Ñ–∞–π–ª—É)
	Enabled        bool              `json:"enabled"`          // –í–∫–ª—é—á–µ–Ω–æ –ª–∏ –ø—Ä–∞–≤–∏–ª–æ
	TriggerAfter   int               `json:"trigger_after"`    // –ü–æ—Å–ª–µ —Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å (0 = —Å—Ä–∞–∑—É)
	MaxTriggers    int               `json:"max_triggers"`     // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π (-1 = –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ)
	ResetAfter     int               `json:"reset_after"`      // –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ —á–µ—Ä–µ–∑ N –∑–∞–ø—Ä–æ—Å–æ–≤ (0 = –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å)
	compiledRegex  *regexp.Regexp    // –°–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–π regex (–Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è)
	requestCount   int               // –°—á–µ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è)
	triggerCount   int               // –°—á–µ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π (–Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è)
	mutex          sync.Mutex        // –ú—å—é—Ç–µ–∫—Å –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ (–Ω–µ —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç—Å—è)
}

// Config –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –ø–æ–¥–º–µ–Ω
type Config struct {
	Overrides []ResponseOverride `json:"overrides"`
}

// LogSettings –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
type LogSettings struct {
	ShowRequestBody  bool
	ShowResponseBody bool
	BodyLogMode      string // "full", "truncate", "none", "json_full"
	MaxLogLength     int
}

var config Config
var logSettings LogSettings

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —Ö–æ—Å—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
	targetHost := os.Getenv("PROXY_TARGET")
	if targetHost == "" {
		targetHost = "https://test.yandex.net" // –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
	port := os.Getenv("PROXY_PORT")
	if port == "" {
		port = "8080" // –ø–æ—Ä—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
	setupLogSettings()

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø–æ–¥–º–µ–Ω
	configFile := os.Getenv("OVERRIDE_CONFIG")
	if configFile == "" {
		configFile = "overrides.json"
	}
	loadConfig(configFile)

	// –ü–∞—Ä—Å–∏–º URL —Ü–µ–ª–µ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
	targetURL, err := url.Parse(targetHost)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ URL: %v", err)
	}

	// –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
	http.HandleFunc("/", func(w http.ResponseWriter, r *http.Request) {
		proxyRequest(w, r, targetURL)
	})

	// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
	http.HandleFunc("/_proxy_stats", func(w http.ResponseWriter, r *http.Request) {
		showStats(w, r)
	})

	log.Printf("–ü—Ä–æ–∫—Å–∏ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:%s", port)
	log.Printf("–ü—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞: %s", targetHost)
	log.Printf("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–æ–¥–º–µ–Ω: %s", configFile)
	log.Printf("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∞–≤–∏–ª –ø–æ–¥–º–µ–Ω—ã: %d", countActiveOverrides())
	log.Printf("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞: http://127.0.0.1:%s/_proxy_stats", port)
	printLogSettings()

	if targetURL.Path != "" && targetURL.Path != "/" {
		log.Printf("–ë–∞–∑–æ–≤—ã–π path: %s", targetURL.Path)
	}

	// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
	err = http.ListenAndServe("127.0.0.1:"+port, nil)
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: %v", err)
	}
}

func setupLogSettings() {
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è body
	logSettings.ShowRequestBody = os.Getenv("LOG_REQUEST_BODY") != "false"
	logSettings.ShowResponseBody = os.Getenv("LOG_RESPONSE_BODY") != "false"
	
	// –†–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è body
	logSettings.BodyLogMode = strings.ToLower(os.Getenv("BODY_LOG_MODE"))
	if logSettings.BodyLogMode == "" {
		logSettings.BodyLogMode = "json_full" // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
	}

	// –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–ª—è truncate —Ä–µ–∂–∏–º–∞
	logSettings.MaxLogLength = 2000
	if maxLen := os.Getenv("MAX_LOG_LENGTH"); maxLen != "" {
		if parsed, err := strconv.Atoi(maxLen); err == nil && parsed > 0 {
			logSettings.MaxLogLength = parsed
		}
	}
}

func printLogSettings() {
	log.Printf("üìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è:")
	log.Printf("   Request Body: %v", logSettings.ShowRequestBody)
	log.Printf("   Response Body: %v", logSettings.ShowResponseBody)
	log.Printf("   Body Log Mode: %s", logSettings.BodyLogMode)
	if logSettings.BodyLogMode == "truncate" {
		log.Printf("   Max Log Length: %d", logSettings.MaxLogLength)
	}
	log.Printf("")
	log.Printf("üí° –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–µ–∂–∏–º—ã BODY_LOG_MODE:")
	log.Printf("   - 'full' - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ body –ø–æ–ª–Ω–æ—Å—Ç—å—é")
	log.Printf("   - 'truncate' - –æ–±—Ä–µ–∑–∞—Ç—å –¥–ª–∏–Ω–Ω—ã–µ body")
	log.Printf("   - 'json_full' - JSON –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±—Ä–µ–∑–∞—Ç—å (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)")
	log.Printf("   - 'none' - –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å body")
	log.Printf("")
}

func loadConfig(configFile string) {
	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	if _, err := os.Stat(configFile); os.IsNotExist(err) {
		createExampleConfig(configFile)
	}

	data, err := os.ReadFile(configFile)
	if err != nil {
		log.Printf("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é: %v", err)
		return
	}

	err = json.Unmarshal(data, &config)
	if err != nil {
		log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
		return
	}

	// –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º regex –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
	for i := range config.Overrides {
		override := &config.Overrides[i]
		if override.IsRegex {
			compiled, err := regexp.Compile(override.URLPattern)
			if err != nil {
				log.Printf("‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∫–æ–º–ø–∏–ª—è—Ü–∏–∏ regex '%s': %v", override.URLPattern, err)
				override.Enabled = false
			} else {
				override.compiledRegex = compiled
			}
		}
		// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏
		override.requestCount = 0
		override.triggerCount = 0
	}

	log.Printf("‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ %s", configFile)
}

func createExampleConfig(configFile string) {
	exampleConfig := Config{
		Overrides: []ResponseOverride{
			{
				Name:        "Yandex bindings - —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ 3 –∑–∞–ø—Ä–æ—Å–æ–≤",
				Method:      "*",
				URLPattern:  "/bindings",
				IsRegex:     false,
				StatusCode:  200,
				TriggerAfter: 3,
				MaxTriggers: 2,
				ResetAfter:  10,
				Headers: map[string]string{
					"Content-Type": "application/json",
					"X-Custom":     "overridden-after-3-requests",
				},
				BodyFile: "responses/bindings.json",
				Enabled:  true,
			},
			{
				Name:        "API users - –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–æ–¥–º–µ–Ω–∞",
				Method:      "GET",
				URLPattern:  `/api/users/\d+`,
				IsRegex:     true,
				StatusCode:  200,
				TriggerAfter: 0, // —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å—Ä–∞–∑—É
				MaxTriggers: -1, // –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ
				Headers: map[string]string{
					"Content-Type": "application/json",
				},
				BodyText: `{"id": 123, "name": "Mock User", "email": "mock@example.com", "mocked": true}`,
				Enabled:  false,
			},
			{
				Name:        "Error simulation - –ø–æ—Å–ª–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤",
				Method:      "POST",
				URLPattern:  "/api/submit",
				IsRegex:     false,
				StatusCode:  500,
				TriggerAfter: 5,
				MaxTriggers: 1, // —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
				Headers: map[string]string{
					"Content-Type": "application/json",
				},
				BodyText: `{"error": "Simulated server error after 5 requests", "code": "MOCK_ERROR"}`,
				Enabled:  false,
			},
		},
	}

	data, _ := json.MarshalIndent(exampleConfig, "", "  ")
	err := os.WriteFile(configFile, data, 0644)
	if err != nil {
		log.Printf("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %v", err)
	} else {
		log.Printf("üìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: %s", configFile)
		
		// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –æ—Ç–≤–µ—Ç–æ–≤
		os.MkdirAll("responses", 0755)
		
		// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä —Ñ–∞–π–ª–∞ –æ—Ç–≤–µ—Ç–∞
		exampleResponse := map[string]interface{}{
			"status": "success",
			"data": map[string]interface{}{
				"bindings": []map[string]interface{}{
					{"id": 1, "name": "binding1", "type": "primary"},
					{"id": 2, "name": "binding2", "type": "secondary"},
					{"id": 3, "name": "binding3", "type": "primary"},
				},
				"total": 3,
			},
			"message": "This is a mocked response from file (triggered after N requests)",
			"triggered_at": "auto-generated",
		}
		responseData, _ := json.MarshalIndent(exampleResponse, "", "  ")
		os.WriteFile("responses/bindings.json", responseData, 0644)
		log.Printf("üìù –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: responses/bindings.json")
	}
}

func countActiveOverrides() int {
	count := 0
	for _, override := range config.Overrides {
		if override.Enabled {
			count++
		}
	}
	return count
}

func findMatchingOverride(method, urlPath string) *ResponseOverride {
	for i := range config.Overrides {
		override := &config.Overrides[i]
		if !override.Enabled {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥
		if override.Method != "*" && !strings.EqualFold(override.Method, method) {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º URL
		var matches bool
		if override.IsRegex {
			matches = override.compiledRegex != nil && override.compiledRegex.MatchString(urlPath)
		} else {
			matches = strings.Contains(urlPath, override.URLPattern)
		}

		if matches {
			override.mutex.Lock()
			override.requestCount++
			
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫–∏
			if override.ResetAfter > 0 && override.requestCount >= override.ResetAfter {
				log.Printf("üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –ø—Ä–∞–≤–∏–ª–∞ '%s' (–¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ %d –∑–∞–ø—Ä–æ—Å–æ–≤)", 
					override.Name, override.ResetAfter)
				override.requestCount = 0
				override.triggerCount = 0
				override.mutex.Unlock()
				continue
			}

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏ –ø–æ—Ä–æ–≥–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
			shouldTrigger := override.requestCount > override.TriggerAfter

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π
			if override.MaxTriggers > 0 && override.triggerCount >= override.MaxTriggers {
				shouldTrigger = false
			}

			if shouldTrigger {
				override.triggerCount++
				log.Printf("üìä –ü—Ä–∞–≤–∏–ª–æ '%s': –∑–∞–ø—Ä–æ—Å %d, —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ %d", 
					override.Name, override.requestCount, override.triggerCount)
				override.mutex.Unlock()
				return override
			} else {
				log.Printf("üìä –ü—Ä–∞–≤–∏–ª–æ '%s': –∑–∞–ø—Ä–æ—Å %d (–Ω—É–∂–Ω–æ %d –¥–ª—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è)", 
					override.Name, override.requestCount, override.TriggerAfter+1)
				override.mutex.Unlock()
			}
		}
	}
	return nil
}

func showStats(w http.ResponseWriter, r *http.Request) {
	w.Header().Set("Content-Type", "application/json")
	
	stats := make([]map[string]interface{}, 0, len(config.Overrides))
	
	for _, override := range config.Overrides {
		override.mutex.Lock()
		stat := map[string]interface{}{
			"name":          override.Name,
			"enabled":       override.Enabled,
			"url_pattern":   override.URLPattern,
			"method":        override.Method,
			"trigger_after": override.TriggerAfter,
			"max_triggers":  override.MaxTriggers,
			"reset_after":   override.ResetAfter,
			"request_count": override.requestCount,
			"trigger_count": override.triggerCount,
		}
		override.mutex.Unlock()
		stats = append(stats, stat)
	}
	
	response := map[string]interface{}{
		"overrides": stats,
		"total_rules": len(config.Overrides),
		"active_rules": countActiveOverrides(),
		"log_settings": map[string]interface{}{
			"show_request_body":  logSettings.ShowRequestBody,
			"show_response_body": logSettings.ShowResponseBody,
			"body_log_mode":      logSettings.BodyLogMode,
			"max_log_length":     logSettings.MaxLogLength,
		},
	}
	
	json.NewEncoder(w).Encode(response)
}

func proxyRequest(w http.ResponseWriter, r *http.Request, targetURL *url.URL) {
	// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
	if strings.HasPrefix(r.URL.Path, "/_proxy") {
		return
	}

	// –û–±—ä–µ–¥–∏–Ω—è–µ–º –±–∞–∑–æ–≤—ã–π path –∏–∑ targetURL —Å path –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
	combinedPath := path.Join(targetURL.Path, r.URL.Path)
	
	// path.Join —É–±–∏—Ä–∞–µ—Ç trailing slash, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
	if strings.HasSuffix(r.URL.Path, "/") && !strings.HasSuffix(combinedPath, "/") {
		combinedPath += "/"
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π URL –¥–ª—è –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏—è
	proxyURL := &url.URL{
		Scheme:   targetURL.Scheme,
		Host:     targetURL.Host,
		Path:     combinedPath,
		RawQuery: r.URL.RawQuery,
	}

	log.Printf("üîÑ %s %s -> %s", r.Method, r.URL.String(), proxyURL.String())

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–¥–º–µ–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	if override := findMatchingOverride(r.Method, r.URL.Path); override != nil {
		log.Printf("üé≠ –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥–º–µ–Ω—É: %s", override.Name)
		handleOverride(w, r, override)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	var requestBody []byte
	if r.Body != nil {
		requestBody, _ = io.ReadAll(r.Body)
		r.Body = io.NopCloser(bytes.NewBuffer(requestBody))
		
		if len(requestBody) > 0 && logSettings.ShowRequestBody {
			logBody("üì§ Request Body", requestBody, r.Header.Get("Content-Type"), r.Header)
		}
	}

	// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π HTTP –∑–∞–ø—Ä–æ—Å
	proxyReq, err := http.NewRequest(r.Method, proxyURL.String(), r.Body)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", http.StatusInternalServerError)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	copyHeaders(proxyReq.Header, r.Header)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π Host –∑–∞–≥–æ–ª–æ–≤–æ–∫
	proxyReq.Host = targetURL.Host

	// –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
	client := &http.Client{}
	resp, err := client.Do(proxyReq)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞", http.StatusBadGateway)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err)
		return
	}
	defer resp.Body.Close()

	// –ß–∏—Ç–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	responseBody, err := io.ReadAll(resp.Body)
	if err != nil {
		http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞", http.StatusInternalServerError)
		log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–ª–∞ –æ—Ç–≤–µ—Ç–∞: %v", err)
		return
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
	log.Printf("üì• Response Status: %d %s", resp.StatusCode, resp.Status)
	
	contentType := resp.Header.Get("Content-Type")
	contentEncoding := resp.Header.Get("Content-Encoding")
	
	if contentType != "" {
		log.Printf("üì• Response Content-Type: %s", contentType)
	}
	if contentEncoding != "" {
		log.Printf("üì• Response Content-Encoding: %s", contentEncoding)
	}

	// –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	if len(responseBody) > 0 && logSettings.ShowResponseBody {
		logBody("üì• Response Body", responseBody, contentType, resp.Header)
	}

	// –ö–æ–ø–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
	copyHeaders(w.Header(), resp.Header)

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
	w.WriteHeader(resp.StatusCode)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É
	_, err = w.Write(responseBody)
	if err != nil {
		log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∫–ª–∏–µ–Ω—Ç—É: %v", err)
	}

	log.Printf("‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω\n")
}

func handleOverride(w http.ResponseWriter, r *http.Request, override *ResponseOverride) {
	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
	for key, value := range override.Headers {
		w.Header().Set(key, value)
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
	var responseBody []byte
	var err error

	if override.BodyFile != "" {
		// –ß–∏—Ç–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞
		responseBody, err = os.ReadFile(override.BodyFile)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ %s: %v", override.BodyFile, err)
			http.Error(w, "–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ–¥–º–µ–Ω—ã", http.StatusInternalServerError)
			return
		}
		log.Printf("üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –∏–∑ —Ñ–∞–π–ª–∞: %s (%d bytes)", override.BodyFile, len(responseBody))
	} else if override.BodyText != "" {
		// –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç
		responseBody = []byte(override.BodyText)
		log.Printf("üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ (%d bytes)", len(responseBody))
	}

	// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Content-Length –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–ª–æ
	if len(responseBody) > 0 {
		w.Header().Set("Content-Length", strconv.Itoa(len(responseBody)))
	}

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–¥
	w.WriteHeader(override.StatusCode)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–ª–æ
	if len(responseBody) > 0 {
		_, err = w.Write(responseBody)
		if err != nil {
			log.Printf("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–¥–º–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞: %v", err)
		}
	}

	// –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
	log.Printf("üé≠ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–¥–º–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
	log.Printf("   Status: %d", override.StatusCode)
	log.Printf("   Headers: %v", override.Headers)
	
	if len(responseBody) > 0 && logSettings.ShowResponseBody {
		contentType := override.Headers["Content-Type"]
		logBody("   Body", responseBody, contentType, nil)
	}

	log.Printf("‚úÖ –ü–æ–¥–º–µ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n")
}

// logBody –ª–æ–≥–∏—Ä—É–µ—Ç —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞/–æ—Ç–≤–µ—Ç–∞ —Å —É—á–µ—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
func logBody(prefix string, body []byte, contentType string, headers http.Header) {
	if len(body) == 0 {
		log.Printf("%s: [Empty]", prefix)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∂–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
	switch logSettings.BodyLogMode {
	case "none":
		log.Printf("%s: [Hidden by BODY_LOG_MODE=none]", prefix)
		return
	case "full":
		logBodyFull(prefix, body, contentType, headers)
		return
	case "truncate":
		logBodyTruncated(prefix, body, contentType, headers)
		return
	case "json_full":
		logBodyJSONSmart(prefix, body, contentType, headers)
		return
	default:
		log.Printf("%s: [Unknown BODY_LOG_MODE: %s]", prefix, logSettings.BodyLogMode)
		return
	}
}

// logBodyFull –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç body –ø–æ–ª–Ω–æ—Å—Ç—å—é
func logBodyFull(prefix string, body []byte, contentType string, headers http.Header) {
	if len(body) > 500*1024 { // 500KB –ª–∏–º–∏—Ç –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
		log.Printf("%s: [Very large content, %d bytes] - skipping log for safety", prefix, len(body))
		return
	}

	decompressedBody := decompressIfNeeded(body, headers)
	
	if utf8.Valid(decompressedBody) {
		log.Printf("%s: %s", prefix, string(decompressedBody))
	} else {
		log.Printf("%s: [Non-UTF8 data, %d bytes]", prefix, len(decompressedBody))
		logHexDump(prefix, body)
	}
}

// logBodyTruncated –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç body —Å –æ–±—Ä–µ–∑–∞–Ω–∏–µ–º
func logBodyTruncated(prefix string, body []byte, contentType string, headers http.Header) {
	decompressedBody := decompressIfNeeded(body, headers)
	
	if utf8.Valid(decompressedBody) {
		text := string(decompressedBody)
		log.Printf("%s: %s", prefix, truncateString(text, logSettings.MaxLogLength))
	} else {
		log.Printf("%s: [Non-UTF8 data, %d bytes]", prefix, len(decompressedBody))
		logHexDump(prefix, body)
	}
}

// logBodyJSONSmart –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç JSON –ø–æ–ª–Ω–æ—Å—Ç—å—é, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –æ–±—Ä–µ–∑–∞–µ—Ç
func logBodyJSONSmart(prefix string, body []byte, contentType string, headers http.Header) {
	decompressedBody := decompressIfNeeded(body, headers)
	
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç JSON
	if isJSONContent(contentType, decompressedBody) {
		// –î–ª—è JSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –≤—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω–æ—Å—Ç—å—é
		if formatted := formatJSON(decompressedBody); formatted != "" {
			log.Printf("%s (JSON formatted):\n%s", prefix, formatted)
		} else {
			// –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å, –≤—ã–≤–æ–¥–∏–º –∫–∞–∫ –µ—Å—Ç—å
			log.Printf("%s (JSON): %s", prefix, string(decompressedBody))
		}
		return
	}

	// –î–ª—è –Ω–µ-JSON –ø—Ä–∏–º–µ–Ω—è–µ–º truncation
	if utf8.Valid(decompressedBody) {
		text := string(decompressedBody)
		log.Printf("%s: %s", prefix, truncateString(text, logSettings.MaxLogLength))
	} else {
		log.Printf("%s: [Non-UTF8 data, %d bytes]", prefix, len(decompressedBody))
		logHexDump(prefix, body)
	}
}

// logHexDump –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç hex –¥–∞–º–ø –¥–ª—è –±–∏–Ω–∞—Ä–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
func logHexDump(prefix string, body []byte) {
	sampleSize := min(64, len(body))
	hexSample := hex.EncodeToString(body[:sampleSize])
	log.Printf("%s (hex sample): %s", prefix, hexSample)
	if len(body) > sampleSize {
		log.Printf("%s (hex): ... +%d more bytes", prefix, len(body)-sampleSize)
	}
}

// decompressIfNeeded —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –µ—Å–ª–∏ –æ–Ω–∏ —Å–∂–∞—Ç—ã
func decompressIfNeeded(body []byte, headers http.Header) []byte {
	if headers == nil {
		return body
	}

	contentEncoding := headers.Get("Content-Encoding")
	if contentEncoding == "" {
		return body
	}

	switch strings.ToLower(contentEncoding) {
	case "gzip":
		if decompressed, err := decompressGzip(body); err == nil {
			log.Printf("üîì Decompressed gzip: %d -> %d bytes", len(body), len(decompressed))
			return decompressed
		}
	}
	
	return body
}

// isJSONContent –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∫–æ–Ω—Ç–µ–Ω—Ç JSON
func isJSONContent(contentType string, body []byte) bool {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º Content-Type
	if strings.Contains(strings.ToLower(contentType), "application/json") {
		return true
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
	if len(body) == 0 {
		return false
	}

	// –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
	var js interface{}
	return json.Unmarshal(body, &js) == nil
}

// formatJSON —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞
func formatJSON(body []byte) string {
	var js interface{}
	if err := json.Unmarshal(body, &js); err != nil {
		return ""
	}

	formatted, err := json.MarshalIndent(js, "", "  ")
	if err != nil {
		return ""
	}

	return string(formatted)
}

// –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
func decompressGzip(data []byte) ([]byte, error) {
	reader, err := gzip.NewReader(bytes.NewReader(data))
	if err != nil {
		return nil, err
	}
	defer reader.Close()
	
	return io.ReadAll(reader)
}

func min(a, b int) int {
	if a < b {
		return a
	}
	return b
}

func truncateString(s string, maxLen int) string {
	if len(s) <= maxLen {
		return s
	}
	return s[:maxLen] + "... [truncated]"
}

func copyHeaders(dst, src http.Header) {
	for name, values := range src {
		if shouldSkipHeader(name) {
			continue
		}
		for _, value := range values {
			dst.Add(name, value)
		}
	}
}

func shouldSkipHeader(name string) bool {
	skipHeaders := []string{
		"Connection",
		"Proxy-Connection",
		"Proxy-Authenticate",
		"Proxy-Authorization",
		"Te",
		"Trailer",
		"Transfer-Encoding",
		"Upgrade",
	}

	lowerName := strings.ToLower(name)
	for _, skipHeader := range skipHeaders {
		if lowerName == strings.ToLower(skipHeader) {
			return true
		}
	}
	return false
}
